"""Utility helpers for streaming encryption.

This module previously used :class:`cryptography.fernet.Fernet` which
required the entire payload to be loaded into memory.  For large file
uploads we instead expose small helpers around AES-CTR that operate on
iterators of bytes objects.  The helpers yield encrypted/decrypted
chunks of the same size as the input, making them suitable for piping
directly into the existing upload routines.
"""

from typing import Iterable, Iterator

import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes


def generate_key() -> bytes:
    """Generate a new 256-bit symmetric key for AES encryption."""
    return os.urandom(32)


def encrypt_stream(key: bytes, iv: bytes, stream: Iterable[bytes]) -> Iterator[bytes]:
    """Encrypt an iterator of bytes using AES-CTR.

    Parameters
    ----------
    key: bytes
        Symmetric key generated by :func:`generate_key`.
    iv: bytes
        16-byte initialization vector.
    stream: Iterable[bytes]
        Iterator yielding plaintext chunks.

    Yields
    ------
    bytes
        Encrypted chunks corresponding to the input.
    """
    cipher = Cipher(algorithms.AES(key), modes.CTR(iv))
    encryptor = cipher.encryptor()
    for chunk in stream:
        yield encryptor.update(chunk)
    tail = encryptor.finalize()
    if tail:
        yield tail


def decrypt_stream(key: bytes, iv: bytes, stream: Iterable[bytes]) -> Iterator[bytes]:
    """Decrypt an iterator of bytes previously encrypted with :func:`encrypt_stream`.

    Parameters
    ----------
    key: bytes
        Symmetric key generated by :func:`generate_key`.
    iv: bytes
        16-byte initialization vector used during encryption.
    stream: Iterable[bytes]
        Iterator yielding encrypted chunks.

    Yields
    ------
    bytes
        Decrypted plaintext chunks.
    """
    cipher = Cipher(algorithms.AES(key), modes.CTR(iv))
    decryptor = cipher.decryptor()
    for chunk in stream:
        yield decryptor.update(chunk)
    tail = decryptor.finalize()
    if tail:
        yield tail
